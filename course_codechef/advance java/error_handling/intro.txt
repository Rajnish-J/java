Introduction - Error and Exception Handling

Imagine you're a chef cooking a delicious meal, and suddenly you realize that you don't have all the ingredients you need. 
What do you do? Do you panic and stop cooking altogether? Or do you find an alternative solution, like substituting one ingredient for another? 
The latter is what Error Handling and Exception Handling is all about in Java programming.

In Java, Error Handling and Exception Handling is the process of anticipating, detecting, and addressing runtime errors in your code. 
These errors can occur due to various reasons, like input from the user, network connectivity, or hardware failure. 
Without proper Error Handling and Exception Handling, these errors can cause your program to crash, resulting in a poor user experience.


Types of errors and exceptions

So, what exactly are errors and exceptions? Well, sometimes when we write code, things don't go as planned. Maybe we forgot to declare a variable, or we tried to divide by zero. 
These types of issues are called errors, and they can cause our program to crash.

But what if we could anticipate these errors and handle them in a way that keeps our program running smoothly? That's where exceptions come in. 
An exception is a type of error that can be caught and handled by our program.

There are three types of errors in Java: syntax errors, runtime errors, and logical errors.

* Syntax errors occur when the code doesn't follow the rules of the Java language.
* Runtime errors occur during the execution of the program and can be caused by things like division by zero or trying to access an element of an array that doesn't exist.
* Logical errors occur when the program runs without any errors, but it doesn't produce the expected output.

Exceptions, on the other hand, can be classified into two types: checked and unchecked exceptions.

* Checked exceptions are those that the compiler knows might occur and requires the programmer to handle them using try-catch blocks.
* Unchecked exceptions, on the other hand, are those that the compiler can't predict and don't require the programmer to handle them, although it's still a good practice to do so.